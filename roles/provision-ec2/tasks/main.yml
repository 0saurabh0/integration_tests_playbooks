---
- name: Debug vpc variable
  debug: var=vpc.subnets

- name: Create the Instance's for this vpc
  ec2:
    region: "{{ ec2_region }}"
    #ec2_access_key: "{{ ec2_access_key }}"
    #ec2_secret_key: "{{ ec2_secret_key }}"
    keypair: "{{ item.keypair }}"
    assign_public_ip: "{{ item.assign_public_ip| default(False) }}"
    instance_type: "{{ item.instance_type }}"
    image: "{{ item.image }}"
    region: "{{ ec2_region }}"
    #vpc_subnet_id: "{{ subnet_maps[item.subnet] }}"
    #vpc_subnet_id: "{{ vpc.subnets | subnet_name_filter(['management-eu-central-1a-mgmt']) | join(', ') }}"
    #vpc_subnet_id: "{{ vpc.subnets | subnet_name_filter(['stage-eu-central-1a-pub']) | join(', ') }}"
    vpc_subnet_id: "{{ vpc.subnets | subnet_name_filter([item.subnet]) | join(', ') }}"
    wait: true
    instance_tags: "{{ item.instance_tags }}"
    exact_count: "{{ item.exact_count }}"
    count_tag: "{{ item.count_tag }}"
    group: '{{ item.group }}'
  register: ec2_inst
  with_items: "{{ vpc_instances }}"

- debug: var=item.tagged_instances[0].public_ip
  with_items: "{{ ec2_inst.results }}"

#- debug: var=item.invocation.module_complex_args.instance_tags['Name']
- debug: var=item.invocation.module_args.instance_tags['Name']
  with_items: "{{ ec2_inst.results }}"

#- debug: var=item.invocation.module_complex_args.instance_tags['env']
- debug: var=item.invocation.module_args.instance_tags['env']
  with_items: "{{ ec2_inst.results }}"
  
#- name: debug complex args
#  debug: var="{{ ec2_inst.results[0].invocation.module_args.instance_tags }}"
#  with_items: "{{ ec2_inst.results }}"
 
- name: Set facts/variables for add_host task
  set_fact:
    tag_Name: "{{ item.invocation.module_args.instance_tags['Name'] }}"
    tag_env: "{{ item.invocation.module_args.instance_tags['env'] }}"
    tag_project: "{{ item.invocation.module_args.instance_tags['project'] }}"
    tag_role: "{{ item.invocation.module_args.instance_tags['role'] }}"
  when: ec2_inst.changed
  with_items: "{{ ec2_inst.results }}"

- name: Add new instances with public IPs to host group
  add_host: name={{ item.public_ip }} >
            groups=tag_Name_{{ tag_Name }},tag_env_{{ tag_env }},tag_project_{{ tag_project }},tag_role_{{ tag_role }},new_ec2_instances
            ec2_region={{ ec2_region }}
            ec2_tag_Name=tag_Name_{{ tag_Name }}
            ec2_tag_env=tag_env_{{ tag_env }} 
            ec2_tag_project=tag_project_{{ tag_project }}
            ec2_tag_role=tag_role_{{ tag_role }}
  with_items: "{{ ec2_inst.results[0].instances }}"
  register: add_hosts
  when: ec2_inst.changed and "{{ tag_Name }}" == "management_server"
   
- name: Add new instances with private IPs to host group
  add_host: name={{ item.private_ip }} >
            groups=tag_Name_{{ tag_Name }},tag_env_{{ tag_env }},tag_project_{{ tag_project }},tag_role_{{ tag_role }},new_ec2_instances
            ec2_region={{ ec2_region }}
            ec2_tag_Name=tag_Name_{{ tag_Name }}
            ec2_tag_env=tag_env_{{ tag_env }}
            ec2_tag_project=tag_project_{{ tag_project }}
            ec2_tag_role=tag_role_{{ tag_role }}
  with_items: "{{ ec2_inst.results[0].instances }}"
  register: virtual_inventory
  when: ec2_inst.changed and "{{ tag_Name }}" != "management_server"

- name: show add_hosts output
  debug: var=virtual_inventory

##- name: Wait until SSH on public instances is available
#  local_action:
#    module: wait_for
#    #host: "{{ item.tagged_instances[0].public_ip }}"
#    host: "{{ item.public_ip }}"
#    port: 22
#  when: ec2_inst.changed and item.public_ip is defined and item.tagged_instances[0].tags['role'] != "nat"
#  with_items: "{{ ec2_inst.results[0].instances }}"
     
  #OK - search for instance IDs which belongs to public security group
   #- name: debug variables from ec2 creation
   #  debug: var="{{ item.id }} {{ item.groups }}"
     #debug: var=item.groups | join("|") | search("{{ environ }}-app") 
     #when: ec2_inst.changed and ( item.groups | join("|") | search("{{ environ }}-app") )
     #when: item.groups | join("|") | search("{{ environ }}-app")
     #with_items: ec2_inst.results[0].instances
     
     #OK
#   - name: Instance IDs
#     set_fact: 
#       deployed_instances: item.instance_ids
#     when: ec2_inst.changed 
#     with_items: ec2_inst.results[0].instances

#- name: Wait until SSH on private instance is available
#  local_action:
#    module: wait_for
#    #host: "{{ item.tagged_instances[0].private_ip }}"
#    host: "{{ item.private_ip }}"
#    port: 22
#  when: ec2_inst.changed and item.private_ip is defined
#  with_items: "{{ ec2_inst.results[0].instances }}"

#   - name: Set fact - management server
#     set_fact: management_server_ip={{ item.tagged_instances[0].public_ip }}
#     with_items: ec2_inst.results
#     when: item.invocation.module_complex_args.instance_tags['Name'] == "management_server"

#   - debug: var=management_server_ip

#   - debug: var=item
#     with_items: ec2_inst.results

- name: Set facts - deployed ec2 instances
  set_fact: 
    ec2_deployed_instances: "{{ ec2_inst.results[0].instances }}"
  when: ec2_inst.changed
